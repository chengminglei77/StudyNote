JSP:动态网页
HTML cs js Jquery静态网页
静态和动态：
	不用和是否有动感混为一谈
	是否随着和时间地点 和用户操作有关改变而改变
动态网页需要使用到 服务端脚本语言 JSP

CS架构
client  server不足
	如果软件升级则全部软件升级。
	维护麻烦，需要维护每一台客户端软件
	每一个客户都要安装客户服务器

BS架构(京东 百度)
Broswer server
	服务器升级，客户端无需理会，
	只要服务器不出故障，客户就可以访问
	客户端可以通过浏览器直接访问服务器无需安装客户端
BS和CS各有优势

tomcat 解压后文件
bin 可执行文件 startup.bat  shutdown.bat
conf 配置文件 server.xml
lib tomcat依赖的jar文件
log 日志文件记录出错等信息
temp 临时文件
webapps 可执行项目 将我们开发的项目放入该目录
work 存放有jsp翻译的java 以及编辑成的class文件 

jsp 不能直接运行 项目运行后产生 java  .class文件在work中，不用程序员负责，系统会自动生成

配置tomcat 
配置jdk  必须配置JAVA_HOME
java_home classpath path

配置CATALINA_HOME

双击bin/startup.bat 启动tomacat,常见错误，可能与其他服务器的端口冲突
tomcat端口默认为8080 此端口较为常见，容易冲突
修改端口号
打开配置文件
<connector port="8080" protocol="HTTP?1.1"
			connectionTimeout="20000"
			redirectPort="8443"/>	
访问tomcat localhost:8080/	
常见状态:
404 资源不存在
200 一切正常
403 权限不足(如果访问a目录，但是a目录设置不可见)
301/300 页面重定向
500 服务器内部错误 (代码有误)

其他编码 ：积累
jsp 就是在HTML中嵌套java代码
项目常放在 webapps 中 必须有WEB-INF文件夹里面必须有web.xml配置信息 lib三方依赖包  classes 程序
精简的web.xml
  <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/javaee/web-app_3_1.xsd"
		    version ="3.1"
			metadata-complete="true">
			<display-name>welcome to Tomcat</display-name>
			<description><!--描述文字-->
					Welcome to Tomcat
			</description>
			<!--指定初始访问文件-->
			<welcome-file-list>
				<welcome-file>index.html</welcome-file>
			</welcome-file-list>	
			
</web-app>
实例 index.jsp
<html>
	<head>
		<title>my jsp project</title>
	</head>
		<body>
			hello jsp.......
			<!--jsp脚本-->
			<%
				out.print("hello world...");
			%>
		</body>
</html>

6.虚拟路径
[方式一：]
将web项目配置到webapps以外的文件,更改tomcat安装目录下config 中的server.xml文件的<Host>中的内容
 <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">

        <!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html -->
        <!--
        <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
        -->

        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern="common" -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log." suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
			<Context  docBase="E:\package\tomcat\jspProject" path="/jspProject"/>
      </Host>
docBase=""实际路径
path： 虚拟路径(绝对路径或相对路劲【相对于webapps】)	
缺点：需要重启  
[方式二：]
tomcat安装目录下 config 下的Catalina中新建project.xml
<Context  docBase="E:\package\tomcat\jspProject" path="/jspProject"/>
	  
虚拟主机	  
通过www.test.com
conf/server.xml
<Connector port="80" protocol="HTTP/1.1"
			connectionTimeout="20000"
			redirectPort="8443"/>
<!--更改默认引擎-->
<Engine name="Catalina" defaultHost="www.test.com">
<Host appBase="D:\tomcat\project\jsproject" name="www.test.com" >
		<context docBase="D:\tomcat\project\jsproject" path="/" />
</Host>
下一步本地域名解析
windows/system32/drivers/etc hosts
<!--增加-->
127.0.0.1 www.test.com

流程 www.test.com->host 找映射关系->server.xml找Engine的defaultHost->通过"/"映射到项目路径


Jsp执行流程：
客户端发出请求 服务端将请求解析完后显示给客户
	第一次访问：收到请求 jsp ->java->class 
	之后直接访问class文件(如果服务端代码更改，将会重新编译)
	
	Jsp 和Servlet 可以相互转换