数组的定义：数组是相同类型数据的有序集合. 数组描述的是相同类型的若干个数据,按照一定的先后次序排列组合而成。其中,每一个数据称作一个数组元素,每个数组元素可以通过一个下标来访问它们. 
数组的四个基本特点：
	1.其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。 
	2.其元素必须是相同类型,不允许出现混合类型。
	3.数组中的元素可以是任何数据类型，包括基本类型和引用类型。
	4.数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的。
创建数组和初始化
声明（一维数组的声明方式有两种）
	type[]   arr_name;（推荐使用这中方式）
	type   arr_name[];
注：
	1.声明的时候并没有实例化任何对象，只有在实例化数组对象时，JVM才分配空间，这时才与长度有关。因此，声明数组时不能指定其长度(数组中元素的个数)，例如： int a[5]; //非法
	2.声明一个数组的时候并没有数组被真正的创建。
	3.构造一个数组，必须指定长度。
初始化：静态初始化 除了用new 关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。
		int[] a={1,2,3};
		Man[] mans{
			new Man(1,1);
			new Man(2,2);
		}
		动态初始化 数组定义与数组元素分配空间并赋值的操作分开进行。
		  int[]a=new int[2];
		  a[0]=1;
		  a[1]=2;
		数组的默认初始化：数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也按照实例变量同样的方式被隐式初始化 
			int a[]=new int[2];
			boolean []b=new boolean[2];
			String[] s=new String[2];
		数组常见操作
		数组的拷贝
				System类里也包含了一个static void arraycopy（object src，int srcpos，object dest， int destpos，int length）方法，该方法可以将src数组里的元素值赋给dest数组的元素，其中srcpos指定从src数组的第几个元素开始赋值，length参数指定将src数组的多少个元素赋给dest数组的元素。
				String[] s = {"Mircosoft","IBM","Sun","Oracle","Apple"}; 
					String[] sBak = new String[6];
					System.arraycopy(s,0,sBak,0,s.length);	
		数组的打印可通过 System.out.println(Array.toString(数组名))；
		数组排序可通过 Arrays.sort(数组名);
		数组的二分法查找，1.先顺序化 Arrays.sort(数组名)2.再调用Arrays.BinarySearch(数组名，所查数据)；
		复制，一般用System.arraycopy();
		填充 Arrays.fill(数组名，开始位置，结束位置，替换后的值)；
		 asList()
			int[] a = {1,2,323,23,543,12,59};
			List<int[]> list = new ArrayList<int[]>();
			list = Arrays.asList(a);   //将数组转成成list对象中的一个元素
			System.out.println(list.get(0)[1]);
		多维数组可以看成以数组为元素的数组。
				静态初始化：int [][] a={{1,2,3},{3,4},{3,4,6,7}};
							System.out.println(a[2][3]);
				动态初始化：int [][]a=new int[3][];
							a[0]=new int[]{1,2};
							a[1]=new int[]{2,3};
							a[2]=new int[]{2,3,4,5};
		a.length可获取数组元素长度，如果数组是二维只可获得第一维数组的长度，a[0].length才是二维的					
StringBuilder与StringBuffer
一.StringBuilder可变字符串，线程不太安全，但效率高，推荐使用。
    StringBuffer可变字符串，线程安全，但效率低，不推荐使用。
    String是不可变字符串，根据实时情况使用，在循环当中不要使用，因为会产生好的没用的字符串。
    String,StringBuilder要学会查看api的良好习惯，通过api学会使用常见的方法，自己利用案例来理解每个方法的具体含义。这样你会更深刻理解每个方法的使用。
			