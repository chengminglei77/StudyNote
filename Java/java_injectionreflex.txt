-------------注解:----------------
什么是注解 Annotation ---不是程序本身，可以对程序作出解释，可以被其他程序读取，和注释的最大区别，如果没有注解信息处理流程，则注解毫无意义
Annotation 格式：注解一“@注释名”在代码中存在的，还可以添加一些参数值，如：@SuppressWarnings(value="unchecked")
  可附加在package class method field上面，相当于给他们添加辅助信息
内置注解 @Override 继承自父类，重写方法
		@Deprecated 此注释	表示该方法不建议使用
		@SuppressWarnings 定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息，需要添加参数才可以使用：
			--参数 deprecation 使用了过时的类或者方法， unchecked 执行了未检查的转换时的警告，如使用集合时未指定泛型 fallthrough 当在switch语句使用时发生case 穿透， path在类 路径，源文件路径中有不存在路径的警告 serial当在可序列化的类上缺少serialVersionUId定义时的警告
					finally 任何finally子句不能完成时的警告，all 关于以上所有情况的警告
					@SuppressWarnings("unchecked")  @SuppressWarnings(value={"unchecked","deprecation"})
使用@interface自定义注解时自动继承了java.lang.annotation.Annotation接口，
要点：   @interface用来声明一个注解，格式为public @interface 注解名 其中的每一个方实际上是声明了一个配置参数1.方法的名称就是参数的类型2.返回值类型就是参数的类型（返回值的类型智能是基本类型，Class String enum） 3.可以通过default来声明参数的默认值，5.如果只有个一个参数成员，一般参数名默认为value		
注意：注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值， 也经常使用负数表示不存在的含义，可在定义注解时为参数赋值，或者在使用时赋值，当只有一个参数值时，一般使用value();
原注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annota类型作说明：@Target 修饰范围 package 取值ElementType PACKAGE  类 接口 枚举 Annotation类型 TYPE  类成员方法 CONSTRUCTOR用于描述构造器，FIELD 用于描述域 METHOND 用于描述方法 方法参数和本地变量 LOCAL_VARIABLE:用于描述局部变量 PARAMENTER 用于描述参数 @Target(value=ElementType.TYPE)
  @Retention 表示需要在什么级别保存该注释信息，用于描述注解的生命周期  取值RetentionPolicy SOURCE 在源文件中有效 CLASS 在class文件中有效 RUNTINME 在运行时有效，为Runtime可以被反射机制读取 @Documented @Inherited
注解必须通过其他程序处理注解才有意义，需要使用反射来处理注解
注解本身没有意义，有意义的是注解的解析.
----------------反射---------------
什么是动态 程序运行时，可以改变程序结构或变量类型，典型的语言：python ruby javascript
function test(){var s="var a =3;var b=5;alert(a+b);"; eval(s);} c c++ java不是动态语言，可以称为准动态语言，具有一定的动态性，利用反射机制，字节码操作获取类似动态语言的特性
JAVA 动态性 反射机制，动态编译，动态执行javaScript代码，动态字节码操作之 
反射机制REFLECTION  对象是表示或者封装一些数据，一个类被加载后，jVM回创建一个对应该类的Class对象，类的整个结构信息会放到对应的Class对象中，这个Class对象就象一面镜子一样，通过这面镜子我可以看到对应类的全部信息，一个类只对应一个反射对象
		----指的是可以于运行时加载，探知，使用编译期间完全未知的类，程序在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性；
			Class c =Class.forName("com.bjxt.test.User");
		----加载完类之后，在堆存中，就产生一个Class对象，这个对象就包含了完整类的结构信息，我们可以通过对象看到类的结构，这个对象就像一面镜子，透过镜子可看到类的结构，称之为：反射
反射机制的常见作用 动态加载类，动态获取类的信息（属性，方法，构造器），动态构造对象  ，动态调用类和对象的任意方法/构造器  动态调用和处理属性 获取泛型信息  处理注解
对象如何获取 
	1.getClass()  Class strClass1=path.getClass(); //path为String 对象 2.运用ClassforName() 3.运用 .class语法   Class strClass=String.class;
	获取类名 class.getName();
	获取包名加类名路径 class.getSimpleName()获取类名
 //用三种方法获得userInfo类的class对象
	Class<?> clssref=Class.forName("包名.类名")；
	Class<?> classref1=  new UserInfo().getClass();//先创建对象，再将对象反射出来
	Class<?> classref2=UserInfo.class;
 //使用Class的newInstance()方法，实例化UserInfo对象
	Class<?> classref=userInfo.class.getClassLoder().loadClass("包名.类名");
	UserInfo user=(UserInfo) classref.newInstance();
	//使用 user.getAge()可获取属性信息
	//使用Constructor类的newInstance()实例化userInfo对象
	Constructor<?> constructoruser1=classref.getDeclaredConstructor(null);
	UserInfo user1=(UserInfo)constructoruser1.newInstance(null);
 
 /获取属性信息
   Field[]f=clazz.getDeclaredFields();   getDeclaredField(String name);获取命名为name的属性  getFields();获取全部public属性    getDeclaredFields()//获取全部声明属性  
//获取方法信息
    Methond[] m=clazz.getDeclaredMethonds(),/与获取属性方法大致相似 .getDeclaredMethod("方法名",parameteTypes参数类型)
 //获取构造器信息
	Constructor[] clazz.getDeclaredConstructors();//与method类似
//通过反射API调用构造方法，构造对象
    TestB tb=(TestB) clazz.newInstance();//调用了TestB的无参构造器
	或者指定类型的构造器 Constructor<TestB> c=clazz.getDeclaredConstructor(int.class,String.class,int.class);
	 TestB u2=c.newInstance(20,"chengmignle",1000);
     System.out.println(u2.getAge());
//通过反射API调用普通方法
            TestB u3=(TestB) clazz.newInstance();
            Method method=clazz.getDeclaredMethod("setAge", int.class);
            method.invoke(u3,"50");
            System.out.println(u3.getAge());
//通过反射API调用普通方法
            TestB u3= (TestB) clazz.newInstance();
            Method method=clazz.getDeclaredMethod("setAge", int.class);
            method.invoke(u3,30);   //这俩句相当于u3.setAge(50);
//通过反射API操作属性
            Field f=clazz.getDeclaredField("uname");
            f.setAccessible(true);//这个属性不用做安全检查了，可以直接访问
            f.set(u3,"chengminglei");
            System.out.println(u3.getUname());
            System.out.println(f.get(u3));//与上一条语句相同作用
///////////////////////////////////////////////////////////////////////////
package fanshe;
/**
 * 获取Class对象的三种方式
 * 1 Object ――> getClass();
 * 2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性
 * 3 通过Class类的静态方法：forName（String  className）(常用)
 *
 */
public class Fanshe {
	public static void main(String[] args) {
		//第一种方式获取Class对象  
		Student stu1 = new Student();//这一new 产生一个Student对象，一个Class对象。
		Class stuClass = stu1.getClass();//获取Class对象
		System.out.println(stuClass.getName());
		
		//第二种方式获取Class对象
		Class stuClass2 = Student.class;
		System.out.println(stuClass == stuClass2);//判断第一种方式获取的Class对象和第二种方式获取的是否是同一个
		
		//第三种方式获取Class对象
		try {
			Class stuClass3 = Class.forName("fanshe.Student");//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名
			System.out.println(stuClass3 == stuClass2);//判断三种方式是否获取的是同一个Class对象
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		
	}
}
////////////////////////////////////////////////////////

package fanshe;
 
public class Student {
	
	//---------------构造方法-------------------
	//（默认的构造方法）
	Student(String str){
		System.out.println("(默认)的构造方法 s = " + str);
	}
	
	//无参构造方法
	public Student(){
		System.out.println("调用了公有、无参构造方法执行了。。。");
	}
	
	//有一个参数的构造方法
	public Student(char name){
		System.out.println("姓名：" + name);
	}
	
	//有多个参数的构造方法
	public Student(String name ,int age){
		System.out.println("姓名："+name+"年龄："+ age);//这的执行效率有问题，以后解决。
	}
	
	//受保护的构造方法
	protected Student(boolean n){
		System.out.println("受保护的构造方法 n = " + n);
	}
	
	//私有构造方法
	private Student(int age){
		System.out.println("私有的构造方法   年龄："+ age);
	}
 
}
/////////////////////////////////////////////////////////////////
package fanshe;
 
import java.lang.reflect.Constructor;
 
 
/*
 * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员；
 * 
 * 1.获取构造方法：
 * 		1).批量的方法：
 * 			public Constructor[] getConstructors()：所有"公有的"构造方法
            public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)
     
 * 		2).获取单个的方法，并调用：
 * 			public Constructor getConstructor(Class... parameterTypes):获取单个的"公有的"构造方法：
 * 			public Constructor getDeclaredConstructor(Class... parameterTypes):获取"某个构造方法"可以是私有的，或受保护、默认、公有；
 * 		
 * 			调用构造方法：
 * 			Constructor-->newInstance(Object... initargs)
 */
public class Constructors {
 
	public static void main(String[] args) throws Exception {
		//1.加载Class对象
		Class clazz = Class.forName("fanshe.Student");
		
		
		//2.获取所有公有构造方法
		System.out.println("**********************所有公有构造方法*********************************");
		Constructor[] conArray = clazz.getConstructors();
		for(Constructor c : conArray){
			System.out.println(c);
		}
		
		
		System.out.println("************所有的构造方法(包括：私有、受保护、默认、公有)***************");
		conArray = clazz.getDeclaredConstructors();
		for(Constructor c : conArray){
			System.out.println(c);
		}
		
		System.out.println("*****************获取公有、无参的构造方法*******************************");
		Constructor con = clazz.getConstructor(null);
		//1>、因为是无参的构造方法所以类型是一个null,不写也可以：这里需要的是一个参数的类型，切记是类型
		//2>、返回的是描述这个无参构造函数的类对象。
	
		System.out.println("con = " + con);
		//调用构造方法
		Object obj = con.newInstance();
	//	System.out.println("obj = " + obj);
	//	Student stu = (Student)obj;
		
		System.out.println("******************获取私有构造方法，并调用*******************************");
		con = clazz.getDeclaredConstructor(char.class);
		System.out.println(con);
		//调用构造方法
		con.setAccessible(true);//暴力访问(忽略掉访问修饰符)
		obj = con.newInstance('男');
	}
	
}
//////////////////后台输出/////////////////////////////////////////////
**********************所有公有构造方法*********************************
public fanshe.Student(java.lang.String,int)
public fanshe.Student(char)
public fanshe.Student()
************所有的构造方法(包括：私有、受保护、默认、公有)***************
private fanshe.Student(int)
protected fanshe.Student(boolean)
public fanshe.Student(java.lang.String,int)
public fanshe.Student(char)
public fanshe.Student()
fanshe.Student(java.lang.String)
*****************获取公有、无参的构造方法*******************************
con = public fanshe.Student()
调用了公有、无参构造方法执行了。。。
******************获取私有构造方法，并调用*******************************
public fanshe.Student(char)
姓名：男
////////////////////////////////////////////////////
package fanshe.field;
 
public class Student {
	public Student(){
		
	}
	//**********字段*************//
	public String name;
	protected int age;
	char sex;
	private String phoneNum;
	
	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", sex=" + sex
				+ ", phoneNum=" + phoneNum + "]";
	}
	
	
}
/////////////////////////////////////////////////////////////////
package fanshe.field;
import java.lang.reflect.Field;
/*
 * 获取成员变量并调用：
 * 
 * 1.批量的
 * 		1).Field[] getFields():获取所有的"公有字段"
 * 		2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；
 * 2.获取单个的：
 * 		1).public Field getField(String fieldName):获取某个"公有的"字段；
 * 		2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)
 * 
 * 	 设置字段的值：
 * 		Field --> public void set(Object obj,Object value):
 * 					参数说明：
 * 					1.obj:要设置的字段所在的对象；
 * 					2.value:要为字段设置的值；
 * 
 */
public class Fields {
 
		public static void main(String[] args) throws Exception {
			//1.获取Class对象
			Class stuClass = Class.forName("fanshe.field.Student");
			//2.获取字段
			System.out.println("************获取所有公有的字段********************");
			Field[] fieldArray = stuClass.getFields();
			for(Field f : fieldArray){
				System.out.println(f);
			}
			System.out.println("************获取所有的字段(包括私有、受保护、默认的)********************");
			fieldArray = stuClass.getDeclaredFields();
			for(Field f : fieldArray){
				System.out.println(f);
			}
			System.out.println("*************获取公有字段**并调用***********************************");
			Field f = stuClass.getField("name");
			System.out.println(f);
			//获取一个对象
			Object obj = stuClass.getConstructor().newInstance();//产生Student对象--》Student stu = new Student();
			//为字段设置值
			f.set(obj, "刘德华");//为Student对象中的name属性赋值--》stu.name = "刘德华"
			//验证
			Student stu = (Student)obj;
			System.out.println("验证姓名：" + stu.name);
			
			
			System.out.println("**************获取私有字段****并调用********************************");
			f = stuClass.getDeclaredField("phoneNum");
			System.out.println(f);
			f.setAccessible(true);//暴力反射，解除私有限定
			f.set(obj, "18888889999");
			System.out.println("验证电话：" + stu);
			
		}
	}
///////////////////////////////////////////////////////////////////////
************获取所有公有的字段********************
public java.lang.String fanshe.field.Student.name
************获取所有的字段(包括私有、受保护、默认的)********************
public java.lang.String fanshe.field.Student.name
protected int fanshe.field.Student.age
char fanshe.field.Student.sex
private java.lang.String fanshe.field.Student.phoneNum
*************获取公有字段**并调用***********************************
public java.lang.String fanshe.field.Student.name
验证姓名：刘德华
**************获取私有字段****并调用********************************
private java.lang.String fanshe.field.Student.phoneNum
验证电话：Student [name=刘德华, age=0, sex=
//////////////////////////////////////////////////////
package fanshe.method;
 
public class Student {
	//**************成员方法***************//
	public void show1(String s){
		System.out.println("调用了：公有的，String参数的show1(): s = " + s);
	}
	protected void show2(){
		System.out.println("调用了：受保护的，无参的show2()");
	}
	void show3(){
		System.out.println("调用了：默认的，无参的show3()");
	}
	private String show4(int age){
		System.out.println("调用了，私有的，并且有返回值的，int参数的show4(): age = " + age);
		return "abcd";
	}
}
////////////////////////////////////////////////////////////
package fanshe.method;
 
import java.lang.reflect.Method;
 
/*
 * 获取成员方法并调用：
 * 
 * 1.批量的：
 * 		public Method[] getMethods():获取所有"公有方法"；（包含了父类的方法也包含Object类）
 * 		public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)
 * 2.获取单个的：
 * 		public Method getMethod(String name,Class<?>... parameterTypes):
 * 					参数：
 * 						name : 方法名；
 * 						Class ... : 形参的Class类型对象
 * 		public Method getDeclaredMethod(String name,Class<?>... parameterTypes)
 * 
 * 	 调用方法：
 * 		Method --> public Object invoke(Object obj,Object... args):
 * 					参数说明：
 * 					obj : 要调用方法的对象；
 * 					args:调用方式时所传递的实参；
):
 */
public class MethodClass {
 
	public static void main(String[] args) throws Exception {
		//1.获取Class对象
		Class stuClass = Class.forName("fanshe.method.Student");
		//2.获取所有公有方法
		System.out.println("***************获取所有的”公有“方法*******************");
		stuClass.getMethods();
		Method[] methodArray = stuClass.getMethods();
		for(Method m : methodArray){
			System.out.println(m);
		}
		System.out.println("***************获取所有的方法，包括私有的*******************");
		methodArray = stuClass.getDeclaredMethods();
		for(Method m : methodArray){
			System.out.println(m);
		}
		System.out.println("***************获取公有的show1()方法*******************");
		Method m = stuClass.getMethod("show1", String.class);
		System.out.println(m);
		//实例化一个Student对象
		Object obj = stuClass.getConstructor().newInstance();
		m.invoke(obj, "刘德华");
		
		System.out.println("***************获取私有的show4()方法******************");
		m = stuClass.getDeclaredMethod("show4", int.class);
		System.out.println(m);
		m.setAccessible(true);//解除私有限定
		Object result = m.invoke(obj, 20);//需要两个参数，一个是要调用的对象（获取有反射），一个是实参
		System.out.println("返回值：" + result);
		
		
	}
}
///////////////////////////////////////////////////////////////////
***************获取所有的”公有“方法*******************
public void fanshe.method.Student.show1(java.lang.String)
public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
public final void java.lang.Object.wait() throws java.lang.InterruptedException
public boolean java.lang.Object.equals(java.lang.Object)
public java.lang.String java.lang.Object.toString()
public native int java.lang.Object.hashCode()
public final native java.lang.Class java.lang.Object.getClass()
public final native void java.lang.Object.notify()
public final native void java.lang.Object.notifyAll()
***************获取所有的方法，包括私有的*******************
public void fanshe.method.Student.show1(java.lang.String)
private java.lang.String fanshe.method.Student.show4(int)
protected void fanshe.method.Student.show2()
void fanshe.method.Student.show3()
***************获取公有的show1()方法*******************
public void fanshe.method.Student.show1(java.lang.String)
调用了：公有的，String参数的show1(): s = 刘德华
***************获取私有的show4()方法******************
private java.lang.String fanshe.method.Student.show4(int)
调用了，私有的，并且有返回值的，int参数的show4(): age = 20
返回值：abcd
////////////////////////////////////
package fanshe.main;
 
public class Student {
 
	public static void main(String[] args) {
		System.out.println("main方法执行了。。。");
	}
}

package fanshe.main;
 
import java.lang.reflect.Method;
 
/**
 * 获取Student类的main方法、不要与当前的main方法搞混了
 */
public class Main {
	
	public static void main(String[] args) {
		try {
			//1、获取Student对象的字节码
			Class clazz = Class.forName("fanshe.main.Student");
			
			//2、获取main方法
			 Method methodMain = clazz.getMethod("main", String[].class);//第一个参数：方法名称，第二个参数：方法形参的类型，
			//3、调用main方法
			// methodMain.invoke(null, new String[]{"a","b","c"});
			 //第一个参数，对象类型，因为方法是static静态的，所以为null可以，第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数
			 //这里拆的时候将  new String[]{"a","b","c"} 拆成3个对象。。。所以需要将它强转。
			 methodMain.invoke(null, (Object)new String[]{"a","b","c"});//方式一
			// methodMain.invoke(null, new Object[]{new String[]{"a","b","c"}});//方式二
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}
}
/////////反射方法的其它使用之---通过反射越过泛型检查
import java.lang.reflect.Method;
import java.util.ArrayList;
 
/*
 * 通过反射越过泛型检查
 * 
 * 例如：有一个String泛型的集合，怎样能向这个集合中添加一个Integer类型的值？
 */
public class Demo {
	public static void main(String[] args) throws Exception{
		ArrayList<String> strList = new ArrayList<>();
		strList.add("aaa");
		strList.add("bbb");
		
	//	strList.add(100);
		//获取ArrayList的Class对象，反向的调用add()方法，添加数据
		Class listClass = strList.getClass(); //得到 strList 对象的字节码 对象
		//获取add()方法
		Method m = listClass.getMethod("add", Object.class);
		//调用add()方法
		m.invoke(strList, 100);
		
		//遍历集合
		for(Object obj : strList){
			System.out.println(obj);
		}
	}
}
	