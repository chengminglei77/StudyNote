对于包装类说，这些类的用途主要包含两种：
  --	a、作为和基本数据类型对应的类类型存在，方便涉及到对象的操作。
  --	b、包含每种基本数据类型的相关属性如最大值、最小值等，以及相关的操作方法（这些操作方法的作用是在基本类型数据、包装类对象、字符串之间提供转化！）。
  --	所有的包装类(Wrapper Class)都有共同的方法,他们是:
  >>>> 
       // 基本类型转换成Integer对象
        Integer int1 = new Integer(10);
        Integer int2 = Integer.valueOf(20);
        // Integer对象转换成int
        int a = int1.intValue();
        // 字符串转化成Integer对象
        Integer int3 = Integer.parseInt("334");
        Integer int4 = new Integer("999");
        // Integer对象转化成字符串
        String str1 = int3.toString();
        // 一些常见的int类型相关的常量。
        System.out.println("int能表示的最大整数：" + Integer.MAX_VALUE);
        System.out.println("int能表示的最小整数：" + Integer.SIZE);
        // 数字转字符串非常简单
        String str = 234 + "";
        System.out.println(str);
自动装箱和拆箱：
     --就是将基本类型和包装类进行自动转换的过程
	   a.自动装箱的过程：每当需要一种类型对象时，这种基本类型就自动的转换为对应的包装类型。
	   b.自动拆箱的过程：每当需要一个值时，被装箱对象中值就自动被提出来，每笔哟啊调用intValue()方法。
			注意点：Integer i=null;
					int j=i;
				  相当于Integer i=null; int j=i.intValue();//null表示i没有参考至任何的对象实体，
				  他可以合法的地指定给对象参考名称。由于实际上i并没有参考至任何的对象，所以也就不可能操作intValue()方法，这样上面的写法在运行时会出现NullPointerException错误。
时间处理相关类
		Date时间类（java.util.Date）
			>>Date()分配一个Date对象，并初始化此对象为当前的日期和时间精确到毫秒）。
				Date(long date) 分配 Date 对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”,即 1970 年 1 月 1 日 00:00:00 GMT）以来的指定毫秒数。 
				Boolean after(Date when) 测试此日期是否在指定日期之后。  
				boolean before(Date when)  测试此日期是否在指定日期之前。
				Boolean equals(Object obj) 比较两个日期的相等性。 
				Long getTime()返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。
				String toString() 把此 Date 对象转换为以下形式的 tring： 
				dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。
		DateFormat和SimpleDateFormat类  
		作用：把时间对象转化成指定格式的字符串。反之，把指定格式的字符串转化成时间对象。		
		
		  // new出SimpleDateFormat对象
        SimpleDateFormat s1 = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        SimpleDateFormat s2 = new SimpleDateFormat("yyyy-MM-dd");
        // 将时间对象转换成字符串
        String daytime = s1.format(new Date());
        System.out.println(s2.format(new Date()));
        System.out.println(new SimpleDateFormat("hh:mm:ss").format(new Date()));
        // 将符合指定格式的字符串转成成时间对象.字符串格式需要和指定格式一致。
        String time = "2007-10-7";
        Date date = s2.parse(time);
        System.out.println("date1: " + date);
        time = "2007-10-7 20:15:30";
        date = s1.parse(time);
        System.out.println("date2: " + date);
File类
	File类的基本用法
		1.java.io.File类：文件和目录路径名的抽象表示形式。
		File类的常见构造方法：
			public File(String pathname)
			以pathname为路径创建File对象，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。
		2.File的静态属性String separator存储了当前系统的路径分隔符。 
		3.通过File对象可以访问文件的属性。
			public boolean canRead()     public boolean canWrite()
			public boolean exists()      public boolean isDirectory()
			public boolean isFile()      public boolean isHidden()
			public long lastModified()   public long length()
			public String getName()      public String getPath()
		4.通过File对象创建空文件或目录（在该对象所指的文件或目录不存在的情况下）。
			public boolean createNewFile()throws IOException
			public boolean delete() 
			public boolean mkdir()， mkdirs()
		5常见构造器，方法的演示案例：
			package com.bjsxt.file;
			import java.io.File;
			import java.io.IOException;
			 
			public class TestFile {
				/**
				 * File文件类 1.代表文件 2.代表目录
				 * 
				 * 
				 */
				public static void main(String[] args) {
					File f = new File("d:/src3/TestObject.java");
					File f2 = new File("d:/src3");
					File f3 = new File(f2, "TestFile.java");
					File f4 = new File(f2, "TestFile666.java");
					File f5 = new File("d:/src3/aa/bb/cc/dd");
					//f5.mkdirs();
					f5.delete();
					 
					try {
						f4.createNewFile();
						System.out.println("文件创建成功！");
					} catch (IOException e) {
						e.printStackTrace();
					}
					if (f.isFile()) {
						System.out.println("是一个文件！");
					}
					if (f2.isDirectory()) {
						System.out.println("是一个目录！");
					}
					if (f3.isFile()) {
						System.out.println("是一个文件奥");
					}
				}
			}		