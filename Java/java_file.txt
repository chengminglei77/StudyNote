package com.xgcd.File;

import java.io.File;
import java.io.IOException;

/**
 * 没有create之前，你的file只能成为对象或者实例，create之后才称为文件
 *两个变量
 *1.路径分隔符  ；
 *2.名称分隔符 /(windows)  \(linux 等)
 * 相对路径 与绝对路径构造 File对象
 *   1.相对路径
 *   File(String parent,String child)==>("E:/xp/test","2.jpg")
 *   File(File parent,String child)==>File(new File("E:/xp/test"),"2.jpg")
 *   2.绝对路径
 *   File(String name)
 * 常用方法
 *  1.文件名
 *  getName() 文件名 路径名
 *  getPath() 路径名
 *  getAbsoluteFile()绝对路径对应的File对象
 *  getAbsolutePath() 绝对路径名
 *  getParent()父目录 相对路径的父目录，可能为null 如删除本身后的结构
 *  2.判断信息
 *   exits()
 *   canWrite()
 *   canRead()
 *   isFile()
 *   isDirectory()
 *   isAbsolute();消除平台差异，ie以盘符开头，其他以/开头
 *   3.长度字节数 不能读取文件夹的长度
 *   length()
 *   4.创建 删除
 *   createNewFile()不存在创建新文件 存在返回false
 *   delete() 删除文件
 *   static createTempFile(前缀3个字节长，后缀默认.temp)默认临时空间
 *   static createTempFile(前缀3个字节长，后缀默认.temp，目录)
 *   deleteOnExit() 退出虚拟机删除，常用于删除临时文件
 */
public class Fileone {
    public static void main(String[] args) throws IOException, InterruptedException {
        //testfirst();
        testName();
        testLength();
        testCreats_delete();
    }
    public static void testfirst(){
        System.out.println(File.pathSeparator);
        System.out.println(File.separator);
        //路径表示形式
        String path = "F:\\java\\threehundredClass";
        path="F:"+File.separator+"java"+File.separator+"threehundredClass";
        //推荐方法
        // path="F:/java/threehundredClass";
        String parentPath="F:/java/threehundredClass/src/com/xgcd/File/Fileone.java";
        String name="2018072030.jpg";
        //相对路径
        File src=new File(parentPath,name);
        //  File src1=new File(new File(parentPath),name);
        //输出
        System.out.println(src.getName());
        System.out.println(src.getAbsolutePath());
        //  System.out.println(src1.getName());
        // System.out.println(src1.getAbsolutePath());
        //绝对路径
        File src2=new File("F:\\java\\threehundredClass\\src\\com\\xgcd\\File\\2018072030.jpg");
        System.out.println(src2.getName());
        System.out.println(src.getPath());
    }
    public static void testCreats_delete() throws IOException, InterruptedException {
        //createNewFile()不存在创建新文件
        String path="F:\\java\\threehundredClass\\2.txt";
        File src=new File(path);
        if(!src.exists()){
            boolean flag=src.createNewFile();
            System.out.println(flag?"创建成功":"创建失败");
        }
        boolean flag=src.delete();
        System.out.println(flag?"删除成功":"删除失败");

        File temp=File.createTempFile("tes",".temp", new File("F:/java/threehundredClass"));
        Thread.sleep(10000);
        temp.deleteOnExit();

    }
    public static void testLength(){
        //String path ="2.txt";
        String path="F:\\java\\threehundredClass\\2.txt";
        File src=new File(path);
        //是否存在
        System.out.println("文件是否存在"+src.exists());
        //是否可读写 canWrite()  canRead()
        System.out.println("文件是否可写"+src.canWrite());
        System.out.println("============");
        if(src.isFile()){
            System.out.println("文件");
        }else if(src.isDirectory()){
            System.out.println("文件夹");
        }else {
            System.out.println("文件不存在");
        }
        System.out.println("是否绝对路径"+src.isAbsolute());
        System.out.println("长度为："+src.length());
    }
    public static void testName() throws IOException {
       //File src=new File("F:/java/threehundredClass/src/com/xgcd/File/2018072030.jpg");
        //建立联系
        File src=new File("2.txt");
        if(!src.exists()) {
            src.createNewFile();
            System.out.println(src.getName());//返回文件名
            System.out.println(src.getPath()); //如果是绝对路径，返回完整路径，否则相对路径
            System.out.println(src.getAbsolutePath());//返回绝对路径
            System.out.println(src.getParent());//返回上一级
        }else {
            System.out.println(src.getName());//返回文件名
            System.out.println(src.getPath()); //如果是绝对路径，返回完整路径，否则相对路径
            System.out.println(src.getAbsolutePath());//返回绝对路径
            System.out.println(src.getParent());//返回上一级目录，如果是相对，返回null返回完整路径
        }
    }
}
////////////////////////////////////////////////////////////
Io流的基本概念和原理
 一.概念
 流 流动 流向 从一端到另一端 源头与目的地
 程序 与文件|数组|网络连接|数据库， 以程序为中心，
 二.Io流分类
 1.流向，输入流与输出流
 2.数据 字节流：二进制 可以一切文件 包括 纯文本 doc 音频 视频等
		字符流：文本文件，只能处理纯文本
 3.功能：节点 包裹源头
 处理：怎强功能 提供性能
 1.字节流 
   输入流 InputStream read(byte[] b) read(byte[],int off,int len)+close()
       FileInStream()
   输出流 OutputStream write(byte[]) write(byte[],int off,int len)+flush()+close()
       FileOutputStream()
  2.字符流
   输入流:Reader read(char[] buf) read(char[] buf, int off, int len)  +close() 
      FileReader()
   输出流:Writer  write(char[] buf) write(char[] buf, int off, int len) +flush() +close()
      write(String str, int off, int len) 
 四.操作
1、举例:搬家     -->读取文件
	   1)、关联房子              --->建立与文件联系
	   2)、选择搬家           -->选择对应流
	   3)、搬家 -->读取|写出
			a)、卡车大小 --->数组大小
			b)、运输 -->读取、写出
	   4)、打发over -->释放资源
2、操作
		1)建立联系
		2)选择流
		3)操作  数组大小+read 、write
		4)释放资源 
///////////////////////////////////////////////////////
package com.xgcd.File;

import java.io.*;

/**
 * 文件的读取
 * 1.建立联系 File对象
 * 2.选择流 文件输入流 InputStream FileInputStream
 * 3.操作 byte[] car =new byte[1024];read 读取大小
 *          输出
 *  4.释放资源 关闭
 *  写文件
 *  1.建立联系 File对象 目的地
 *  2.选择流 文件输出流 OutputStream FileOutputStream
 *  3.操作 write() +flush
 *  4,释放资源 ：关闭
 */

public class Filesecond {
    public static void main(String[]args){
        ReadFile();
        WriteFile();
    }
    public static void ReadFile(){
        //1.建立联系，File对象
        File src=new File("F:\\java\\threehundredClass\\src\\com\\xgcd\\File\\1.txt");
        //2.选择流
        InputStream is=null; //提升作用域
        try {
            is=new FileInputStream(src);
            //3.操作 不断读取 缓冲数组
            byte[] car=new byte[1024];
            int len=0;//接受 实际读取大小
            //循环读取
            StringBuilder sb =new StringBuilder();
            while(-1!=(len=is.read(car))){
                System.out.println(len);
                String info=new String(car,0,len);
                sb.append(info);
                System.out.println(info.toString());
            }
            System.out.println(sb.toString());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.out.println("文件不存在");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("读取文件失败");
        }finally{
            try{
                if(null!=is){
                    is.close();
                }
            }catch (Exception e2){
                System.out.println("关闭文件输入流失败");
            }
        }
    }
    public static void WriteFile(){
        //1.建立联系 File对象 目的地
        File dest=new File("F:\\java\\threehundredClass\\src\\com\\xgcd\\File\\2.txt");
        //2.选择流 文件输出流OutputStream FileOutputStream
        OutputStream os=null;
        //以追加形式 写出文件 必须为true 否则为覆盖

        try {
            os=new FileOutputStream(dest,true);
            //3.操作
            String str ="bjsxt is very good\r\n";
            //字符串转换成字节数组
            byte[] data = str.getBytes();
            os.write(data,0,data.length);
            os.flush();//强制刷新出去
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            //4.释放资源
            try{
                if(null!=os){
                    os.close();
                }
            }catch(Exception e2){
                System.out.println("关闭输出流失败");
            }
        }
    }
}
////////////////拷贝////////////////////////////////
package com.xgcd.File;
import java.io.*;

/**
 * 1.建立联系 File对象 源头目的地
 * 2.选择流
 *      文件输入流 InputStream FileInputStream
 *      文件输出流 OutputStream FileOutputStream
 *  3.操作 ：拷贝
 *          byte[] flush=new byte[1024];
 *          int len =0;
 *          while(-1！=（len=输入流.read(flush)）){
 *              输出流.write(flush,0,len);
 *          }
 *          输出流.flush
 *  4.释放资源 关闭 两个流  先打开的后关闭
 */
public class Filethird {
    public static void main(String[]args){
        String src="F:\\java\\threehundredClass\\src\\com\\xgcd\\File\\1.txt";
        String dest="F:\\java\\threehundredClass\\src\\com\\xgcd\\File\\2.txt";

        try {
            copyFile(src,dest);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.out.println("文件不存在");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("拷贝文件失败|关闭流失败");
        }

    }
    public static void copyFile(String src,String dest) throws IOException {
        //1.建立联系 源+目的
        File src1=new File(src);
        File dest1=new File(dest);
        if(!src1.isFile()){//不是文件或者为null
            System.out.println("只能拷贝文件");
        }
        //2.选择流
        InputStream is =new FileInputStream(src1);
        OutputStream os=new FileOutputStream(dest1);
        //3.文件拷贝 循环读取写出
        byte[] flush=new byte[1024];
        int len=0;
        //读取
        while(-1!=(len=is.read(flush))){
            //写出
            os.write(flush,0,len);
        }
        os.flush();
        os.close();
        is.close();
    }
}
/////////////////////////////  实现////////////////////////////////////////
package com.xgcd.File;
import java.io.*;
/**
 * 文件操作
 * 1.文件拷贝
 * 2.文件夹拷贝 拒绝拷贝自己
 */
public class Filefourth {
    public static void copyDir(String  srcPath,String destPath) throws
            FileNotFoundException, IOException{
        //拒绝自己拷贝给自己
        if(srcPath.equals(destPath)){
            return ;
        }
        File src=new File(srcPath);
        File dest =new File(destPath);
        copyDir(src,dest);
    }
    /**
     * 拷贝文件夹
     * @param src 源File对象
     * @param dest 目标File对象
     * @throws IOException
     * @throws FileNotFoundException
     */
    public static void copyDir(File src,File dest) throws FileNotFoundException,
            IOException{
        if(src.isDirectory()){ //文件夹
            dest =new File(dest,src.getName());
            if(dest.getAbsolutePath().contains(src.getAbsolutePath())){
                System.out.println("父目录不能拷贝到子目录中");
                return;
            }
        }
        copyDirDetail(src,dest);
    }
    /**
     * 拷贝文件夹细节
     * @param src
     * @param dest
     */
    public static void copyDirDetail(File src,File dest) throws
            FileNotFoundException,IOException{
        if(src.isFile()){ //文件
            try {
                Filefourth.copyFile(src, dest);
            } catch (FileNotFoundException e) {
                //e.printStackTrace();
                throw e;
            } catch (IOException e) {
                //e.printStackTrace();
                throw e;
            }
        }else if(src.isDirectory()){ //文件夹
            //确保目标文件夹存在
            dest.mkdirs();
            //获取下一级目录|文件
            for(File sub:src.listFiles()){
                copyDirDetail(sub,new
                        File(dest,sub.getName()));
            }
        }
    }
    /**
     * 文件的拷贝
     * @throws FileNotFoundException,IOException
     * @return
     */
    public static void copyFile(String srcPath,String destPath) throws
            FileNotFoundException,IOException {
        //1、建立联系 源(存在且为文件) +目的地(文件可以不存在)
        copyFile(new File(srcPath),new File(destPath));
    }
    /**
     * 文件的拷贝
     */
    public static void copyFile(File src,File dest) throws
            FileNotFoundException,IOException {
        if(! src.isFile()){ //不是文件或者为null
            System.out.println("只能拷贝文件");
            throw new IOException("只能拷贝文件");
        }
        //dest为已经存在的文件夹，不能建立于文件夹同名的文件
        if(dest.isDirectory()){
            System.out.println(dest.getAbsolutePath()+" 不能建立于文件夹同名的文件");
            throw new IOException(dest.getAbsolutePath()+" 不能建立于文件夹同名的文件");
        }
        //2、选择流
        InputStream is =new BufferedInputStream(new
                FileInputStream(src));
        OutputStream os =new BufferedOutputStream(new
                FileOutputStream(dest));
        //3、文件拷贝   循环+读取+写出
        byte[] flush =new byte[1024];
        int len =0;
        //读取
        while(-1!=(len=is.read(flush))){
            //写出
            os.write(flush, 0, len);
        }
        os.flush(); //强制刷出
        //关闭流
        os.close();
        is.close();
    }
}
////////////////纯文本读取/////////////////////////////
package File;

import java.io.*;

//纯文本读取
public class ReadDemo {
    public static void main(String[] args){
      writefile();
    }
    public static void writefile(){
        //创建源
        File dest=new File("E:\\java\\ThreaClass\\src\\File\\b.txt");
        //选择流
        Writer wr=null;
        //追加文件，而不是覆盖文件
        try {
            wr=new FileWriter(dest);
            //写出
            String msg="追加.........锄禾日当午\r\n码农";
            wr.write(msg);
            wr.append("倒萨发了看电视剧");
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            try{
                if(null!=wr){
                    wr.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


    }
    public static void readfile(){
        //创建源
        File src=new File("E:\\java\\ThreaClass\\src\\File\\a.txt");
        //选择流
        Reader reader=null;
        try{
            reader = new FileReader(src);
            //读取操作
            char[] flush =new char[1024];
            int len=0;
            while(-1!=(len=reader.read(flush))){
                //字符数组转换成字符串
                System.out.println(flush.length+"  "+len);
                String str=new String(flush);
                System.out.println(str);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            try{
                if(null!=reader){
                    reader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
//////////////////////编码与解码概念////////////////////////////////////
package File;
import java.io.*;
/**
 * 处理流：增强功能 提供性能 节点流之上一 缓冲流1 字节缓冲流2）
 * BufferedReader readLine()
 * BufferedReader newLine()转换流:字节流转换为字符流 处理乱码（编码集 解码集）
 *
 * 1.编码与解码概念 编码： 字符--编码字符集-->二进制 解码：二进制码--解码符集->字符
 * 2、乱码:
 * 1)编码与解码的字符集不统一
 * 2)字节缺少，长度丢失
 * 3、文件乱码
 * InputStreamReader(字节输入流,"解码集")
 * OutputStreamWriter(字符输出流,"编码集")
 *
 * 字节流文件拷贝+缓冲流 提高性能
 * 缓冲流（节点流）
 */
public class StreamDemo {
    public static void main(String []args){
        /**
         * 字符缓冲流 + 新增方法（不能发生多态）
         */
        //创建源 仅限于 字符的纯文本
        File src= new File("E:\\java\\ThreaClass\\src\\File\\a.txt");
        File dest=new File("E:\\java\\ThreaClass\\src\\File\\b.txt");
        //选择流
        BufferedReader reader=null;
        BufferedWriter wr=null;

        try {
            reader =new BufferedReader(new FileReader(src));
            wr=new BufferedWriter(new FileWriter(dest));

            //读取操作
            /**
             * char [] flush=new char[1024];
             * int len=0;
             * while(-1!=(len=reader.read(flush))){
             *     wr.write(flush,0,len);
             * }
             */
            //新增方法的操作
            String line=null;
            while(null!=(line = reader.readLine())){
                wr.write(line);
                //wr.append("\r\n");
                wr.newLine();//换行符号
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.out.println("源文件不存在");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("文件读取失败");
        }finally {
            try{
                if(null!=wr){
                    wr.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
           try{
                if(null!=reader){
                    reader.close();
                }
           } catch (IOException e) {
               e.printStackTrace();
           }
        }
    }
    public static void copyFile(String srcPath,String destPath) throws IOException {
        //1.建立联系 源（存在且问文件）+目的目标（可以不存在）
        File src = new File(srcPath);
        File dest=new File(destPath);
        if(!src.isFile()) {//不是文件
          System.out.println("只能拷贝文件");
          throw new IOException("只能拷贝文件");
        }
        //2.选择流
        InputStream is=new BufferedInputStream(new FileInputStream((src)));
        OutputStream os=new BufferedOutputStream(new FileOutputStream(dest));
        //3.文件拷贝 循环读取写出
        byte[] flush=new byte[1024];
        int len=0;
        //读取
        while(-1!=(len=is.read(flush))){
            //写出
            os.write(flush,0,len);
        }
        os.flush();//强制刷出
        //关闭流
        os.close();
        is.close();
    }
}
/////////////////////////文件编码和解码//////////////////////////////////
package File;

import java.io.*;

/**
 * 编码《---》解码
 * 转换流 字节流 转换为字符流 字符2，乱码1）编码与解码的字符集不统一
 * 2)字节缺少，长度丢失
 * 3、文件乱码
 * InputStreamReader(字节输入流,"解码集")
 * OutputStreamWriter(字符输出流,"编码集")
 */
public class ConverDemo {
    public static void main(String[] args) throws Exception {
        String  str="中国";
        byte []data= str.getBytes();
        //字节数不完整
        System.out.println(new String(data,0,str.length()*3));
        test1();
        test2();
}
    //编码与解码字符集必须相同 否则乱码
    public static void test1(){
        //解码 byte---->char
        String str = "中国万岁";
        //编码 char--->byte
        byte[] data = str.getBytes();
        //编码与解码字符集同一
        System.out.println(new String(data));
        try {
            data=str.getBytes("utf-8");
            //设定编码字符集
            //不同一出现乱码
            System.out.println(new String(data));
            //编码
            byte[] data2="中  国".getBytes("utf-8");
            //解码
            str=new String(data2,"utf-8");
            System.out.println(str);

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
    //转换流  字节转为字符
    //1.输出流 OutputStreamWriter 编码
    //2.输入流 InputStreamReader 解码
    public static void test2() throws Exception {
        //制定解码字符集
        BufferedReader br = new BufferedReader(new InputStreamReader(new BufferedInputStream(new FileInputStream(
                        new File("E:\\java\\ThreaClass\\src\\File\\b.txt"))), "utf-8"));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(
                new File("E:\\java\\ThreaClass\\src\\File\\a.txt")))));
        String info=null;
        while(null!=(info=br.readLine())){
            System.out.println(info);
            bw.write(info);
            bw.newLine();
        }
        bw.flush();
        bw.close();
        br.close();
    }
}
////////////////////IO图形化小结///////////////////////
一、步骤： 创建源 选择流 操作(读取|写出) 释放
二、流
节点流:离数据源|程序最近的流 处理流:装饰模式 提高性能增强功能   
		1、 字节流:可以处理一切(纯文本、音频、视频等)
		1)、输入流 InputStream FileInputStream
		ByteArrayInputStream
操作:read(字节数组)
		 a)、中间容器  byte[] flush=new byte[长度]
		 b)、接收长度  int len =0;
		c)、循环读取 while(-1!=(len=流.read(flush))){}
		 d)、操作:输出、拷贝
2)、输出流 OutputStream FileOutputStream
ByteArrayOutputStream
操作:write(字节数组,0,长度)  输出
2、 字符流:只能处理纯文本
1)、输入流:Reader FileReader
操作:read(字符数组)
a)、中间容器  char[] flush=new char[长度]
b)、接收长度  int len =0;
c)、循环读取 while(-1!=(len=流.read(flush))){}
d)、操作:输出、拷贝
2）、输出流:Writer FileWriter
操作:write(字符数组,0,长度)  输出 1、 转换流:解码与编码字符集问题
1)、输入流:InputStreamReader à解码
2)、输出流:OutputStreamWriter—>编码
2、缓冲流:提高性能
   1)、输入流:BufferedInputStream BufferedReader
   2)、输出流:BufferedOutputStream BufferedWriter
3、处理数据+类型
1)、基本+字符串：必须存在才能读取 读取与写出顺序一致
   a)、输入流:DataInputStream readXxx
   b)、输出流:DataOutputStream writeXxx
2）、引用类型:Serializable transient
   a)、反序列化:ObjectInputStream readObject
   b)、序列化:ObjectOutputStream writeObject
4、打印流: PrintStream 
5、System.in out err  setIn setOut
以下流使用新增方法不能发生多态
1、 ByteArrayOutputStream:  toByteArray()
2、 BufferedReader: readLine()
3、 BufferedWriter:newLine()
4、 DataInputStream DataOutputStream
5、 ObjectInputStream ObjectOutputStream
6、 PrintStream 

////////////////其他流////////////////
package com.sxxgcd.file1;

import java.io.*;

/**
 * 字节不用数组，节点流
 * 数组的长度有限，数据量不会太大
 * 文件内容太大
 * 文件--->程序->字节数组
 * 字节数组---程序---文件
 */
public class  ByteArrayDemo {
    public static void main(String[]args) throws IOException {
            read(write());
    }
    public static byte[] write() throws IOException {
        //输出流 操作文件和文件输出流有些不同有新增方法 不能使用多态
        byte[] dest;
        //选择流不同点
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        //操作写出
        String msg="操作与文件输入流操作一致";
        byte[] info=msg.getBytes();
        bos.write(info,0,info.length);
        //获取数据
        dest=bos.toByteArray();
        //释放资源
        bos.close();
        return dest;
    }
    public static void read(byte[] src) throws IOException {
        //输入流 操作与文件输入流操作一致
        //数据传入
        InputStream is=new BufferedInputStream(new ByteArrayInputStream(src));
        //操作
        byte[]flush=new byte[1024];
        int len = 0;
        while(-1!=(len=is.read(flush))){
            System.out.println(new String(flush,0,len));
        }
        //释放资源
        is.close();
    }
}
//////////////////////////////////////////////////////
package com.sxxgcd.file1;

import java.io.*;

/**
 * 文件---程序->字节数组
 * 1）文件输入流
 *          字节数组输出流
 * 2）字节数组 ---程序 -》文件
 *   1）字节数组输入流
 *        文件输出流
 */
public class ByteToFile {
    public static void main(String[]args) throws IOException {
            toFileFromByteArray(getBytesFromFile("E:\\C语言代码\\code\\数字图像处理技术课程\\测试图像\\airplane.jpg"),"E:\\图像\\airplane.jpg");
    }
    //字节数组 ---程序----》文件
    public static void toFileFromByteArray(byte[]src,String  destPath) throws IOException {
        //创建源 目的地
        File dest=new File(destPath);
        //选择流
        //字节数组输入流
        InputStream is = new BufferedInputStream(new ByteArrayInputStream(src));
        //文件输出流
        OutputStream os =new BufferedOutputStream(new FileOutputStream(dest));
        //操作 不断读取字节数组
        byte[] flush=new byte[1];
        int len=0;
        while(-1!=(len =is.read(flush))){
            //写出到文件中
            os.write(flush,0,len);
        }
    }
    //文件 ---程序->字节数组
    public static byte[] getBytesFromFile(String srcPath) throws IOException {
        //创建文件源
        File src=new File(srcPath);
        //创建字节数组目的地
        byte[] dest=null;
        //选择流 文件输入流
        InputStream is=new BufferedInputStream(new FileInputStream(src));
        //字节数组输出流 不能使用多态
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        //操作 不断读取文件 写出到字节数组刘中
        byte[] flush=new byte[1024];
        int len=0;
        while(-1!=(len=is.read(flush))){
            //写出到字节数组流中
            bos.write(flush,0,len);
        }
        bos.flush();
        //获取数据
        dest=bos.toByteArray();
        bos.close();
        is.close();
        return dest;
    }
}
/////////////////////////////////////
package com.sxxgcd.file2;

import java.io.*;

/**
 * 数据类型（基本+String）处理流
 * 1.输入流 DataInputStream readXxx()
 * 2.输出流 DataOutputStream writeXxx()
 * 新增方法不能使用多态
 * java.io.EOFException 没有读取相关类容
 */
public class DataStreamDemo {
    public static void main(String[]args){
        byte[] data= new byte[0];
        try {
            data = write();
            read(data);
            System.out.println(data.length);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static byte[] write() throws IOException{
        //目标数组
        byte[] dest =null;
        double point =2.5;
        long num=100L;
        String str ="数据类型";
        //选择流 ByteArrayOutputStream  DataOutputStream
        ByteArrayOutputStream bos =new ByteArrayOutputStream();
        DataOutputStream dos =new DataOutputStream(
                new BufferedOutputStream(
                        bos
                )
        );
        //操作 写出的顺序 为读取准备
        dos.writeDouble(point);
        dos.writeLong(num);
        dos.writeUTF(str);
        dos.flush();
        dest =bos.toByteArray();
        //释放资源
        dos.close();
         return dest;
    }
    //从字节数组中读取数据+类型
    public static void read(byte[] src) throws IOException {
        //选择流
        DataInputStream dis =new DataInputStream(new BufferedInputStream(new ByteArrayInputStream(src)));
        //操作 读取顺序与写出顺序一致 必须存在才能读取
        //不一致 数据存在问题
        long num2=dis.readLong();
        double num1=dis.readDouble();
        String str=dis.readUTF();
        dis.close();
        System.out.println(num2+"------"+num1+"----->"+str);
    }
}
package com.sxxgcd.file2;

import java.io.*;

/**
 *   数据类型 （基本String）处理流
 *   输入流  DataInputStream readxxx()
 *   输出流   DataOutputStream writeXxx()
 *   新增方法不能使用多态
 */
public class DateStringDemo {
    public static void main(String[] args){
        try {
            //write("E:\\java\\ThreaClass\\src\\File\\c.txt");
           read("E:\\java\\ThreaClass\\src\\File\\c.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static void write(String destPath) throws IOException {
        double point=2.5;
        long num=100L;
        String str="数据类型";
        //创建源
        File dest=new File(destPath);
        //选择流
        DataOutputStream dos=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dest)));
        //操作 写出顺序 为读取做准备
        dos.writeDouble(point);
        dos.writeLong(num);
        dos.writeUTF(str);
        dos.flush();
        //释放资源
        dos.close();
    }
    //从文件读取数据+类型
    public static void read(String destPath) throws IOException{
        //创建源
        File src=new File(destPath);
        //选择流
        DataInputStream dis=new DataInputStream(new BufferedInputStream(new FileInputStream(src)));
        //操作 读取顺序与写出顺序一致 必须存在才能读取
        //不一致 数据存在问题
        long num2=dis.readLong();
        double num1=dis.readDouble();
        String str=dis.readUTF();
        dis.close();
        System.out.println(num2+"------"+num1+"----->"+str);
    }
}
处理流 
处理流：
	1.基本类型+String 保留数据+类型
	输入流：DataInputStream readxxx
	输出流：DataOutputStream write()
	2.引用类型 对象 保留数据+类型
	反序列化 输入流 ObjectInputStream readObject
	序列化 输出流 ObjectOutputStream writeObject
	注意：
	1）先序列化后反序列化：反序列化顺序必须与序列化一致
	2）不是所有的对象都可以序列化，javaio.Serializable
	不是所有的属性都需要序列化 teansient 修饰之后读取时是一个null或者默认值
	package com.sxxgcd.Seriallizable;

import java.io.*;
import java.util.Arrays;

public class ObjectstreamDemo {
    public static void main(String[]args){
        try {
            seri("E:\\java\\ThreaClass\\src\\File\\d.txt");
            read("E:\\java\\ThreaClass\\src\\File\\d.txt");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
    //反序列化
    public static void read(String destPath) throws IOException, ClassNotFoundException {
        //创建源
        File src=new File(destPath);
        //选择流
        ObjectInputStream dis=new ObjectInputStream(
                new BufferedInputStream(
                        new FileInputStream(src)
                )
        );
        //操作 读取顺序与写出顺序一致 必须存在才能读取
        //不一致 数据存在问题
        Object obj=dis.readObject();
        if(obj instanceof Employ){
            Employ em=(Employ)obj;
            System.out.println(em.getName()+"------"+em.getSalary());
        }
        obj=dis.readObject();
        int[] arr=(int[])obj;
        System.out.println(Arrays.toString(arr));
    }
    //序列化
    public static void seri(String destPath) throws IOException {
        Employ emp =new Employ("sxxgcd",1000000);
        int[]arr={1,2,3,45};
        //创建源
        File dest=new File(destPath);
        //选择流 ObjectOutputStream
        ObjectOutputStream dos=new ObjectOutputStream(
                new BufferedOutputStream(
                        new FileOutputStream(dest)
                )
        );
        //操作写出顺序 为读取准备
        dos.writeObject(emp);
        dos.writeObject(arr);
        //释放资源
        dos.close();
    }
}
/////////////////从控制台到文件 在从文件到控制////////////////
package com.sxxgcd.printStream;

import java.io.*;
import java.util.Scanner;

//printStream 打印流----->处理流
public class printStreamDemo1 {
    public static void main(String[] args) throws IOException {
        testBufferIn();
    }
    public static void printtoConsole() throws FileNotFoundException {
      //  test1();
       // test2();
        //重定向
        System.setOut(new PrintStream(new BufferedOutputStream(
                new FileOutputStream("E:\\java\\ThreaClass\\src\\File\\print.txt")
        ),true));
        System.out.println("a"); //控制台---》文件
        System.out.println("test");
        //回控制台
        System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(FileDescriptor.out)),true));
        System.out.println("back......");
    }
    public static void test2() throws FileNotFoundException {
        InputStream is=System.in;//键盘输入
        is=new BufferedInputStream(new FileInputStream(
                "E:\\java\\ThreaClass\\src\\File\\print.txt"));
        Scanner sc=new Scanner(is);
        System.out.println("请输入:");
        System.out.println(sc.nextLine());
    }
    public static void test1(){
        System.out.println("test");
        System.err.println("err");
    }
    public static void printtoFile() throws FileNotFoundException {
        System.out.println("test");
        PrintStream ps=System.out;
        ps.println(false);
        //输出到文件
        File src=new File("E:\\java\\ThreaClass\\src\\File\\a.txt");
        ps=new PrintStream(new BufferedOutputStream(new FileOutputStream(src)));
        ps.println("io is so easy....");
        ps.close();
    }
    public static void testBufferIn() throws IOException {
        InputStream is=System.in;
        BufferedReader br=new BufferedReader(new InputStreamReader(is));
        System.out.println("请输入.......");
        String msg=br.readLine();
        System.out.println(msg);
    }
}
/**
 * 类与类之间的关系
 * 1.依赖：形参|局部变量
 * 2.关联 属性
 *      聚合：属性 整体与部分 不一致的生命周期 人与手
 *      组合：属性 整体与部分 一致的生命周期 人与大脑
 * 3.继承 父子类关系
 * 4.实现 接口与实现类的关系
 */
 
一、步骤： 创建源 选择流 操作(读取|写出) 释放
二、流
 
节点流:离数据源|程序最近的流 处理流:装饰模式 提高性能增强功能   
1、 字节流:可以处理一切(纯文本、音频、视频等)
1)、输入流 InputStream FileInputStream
ByteArrayInputStream
操作:read(字节数组)
 a)、中间容器  byte[] flush=new byte[长度]
 b)、接收长度  int len =0;
c)、循环读取 while(-1!=(len=流.read(flush))){}
 d)、操作:输出、拷贝
2)、输出流 OutputStream FileOutputStream
ByteArrayOutputStream
操作:write(字节数组,0,长度)  输出
2、 字符流:只能处理纯文本
1)、输入流:Reader FileReader
操作:read(字符数组)
a)、中间容器  char[] flush=new char[长度]
b)、接收长度  int len =0;
c)、循环读取 while(-1!=(len=流.read(flush))){}
d)、操作:输出、拷贝
2）、输出流:Writer FileWriter
操作:write(字符数组,0,长度)  输出 1、 转换流:解码与编码字符集问题
1)、输入流:InputStreamReader à解码
2)、输出流:OutputStreamWriter—>编码
2、缓冲流:提高性能
   1)、输入流:BufferedInputStream BufferedReader
   2)、输出流:BufferedOutputStream BufferedWriter
3、处理数据+类型
1)、基本+字符串：必须存在才能读取 读取与写出顺序一致
   a)、输入流:DataInputStream readXxx
   b)、输出流:DataOutputStream writeXxx
2）、引用类型:Serializable transient
   a)、反序列化:ObjectInputStream readObject
   b)、序列化:ObjectOutputStream writeObject
4、打印流: PrintStream 
5、System.in out err  setIn setOut
以下流使用新增方法不能发生多态
1、 ByteArrayOutputStream:  toByteArray()
2、 BufferedReader: readLine()
3、 BufferedWriter:newLine()
4、 DataInputStream DataOutputStream
5、 ObjectInputStream ObjectOutputStream
6、 PrintStream
四、操作
0、打印文件|目录
1、文件拷贝
2、关闭流方法
3、文件分割与合并(自学)
//////////////////////////参考网站////////////////////////////
https://www.cnblogs.com/zhaoyanjun/p/6292384.html